import { Component, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { {{pascalCase name}}Service } from '@modules/{{dashCase name}}/services/{{dashCase name}}.service';
import { GeneralTableService } from '@modules/shared/components/general-table/service/general-table.service';
import { {{pascalCase name}} } from '@modules/shared/models/entities/{{dashCase name}}.model';
import { select, Store } from '@ngrx/store';
import { {{camelCase name}}NgrxHelper, {{pascalCase name}}State } from '@modules/{{dashCase name}}/ngrx/{{dashCase name}}.reducer';
import { ElementStateModel } from '@modules/shared/models/element-state.model';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import i18next from 'i18next';

@Component({
    selector: 'rp-view-{{dashCase name}}s',
    templateUrl: './view-{{dashCase name}}s.component.html',
    providers: [GeneralTableService],
    styleUrls: ['./view-{{dashCase name}}s.component.less'],
})
export class View{{pascalCase name}}sComponent implements OnInit, OnDestroy {
    {{camelCase name}}s: {{pascalCase name}}[];
    get{{pascalCase name}}sState: ElementStateModel = new ElementStateModel();

    @Input() action: TemplateRef<any>;
    private destroy$ = new Subject();

    constructor(private {{camelCase name}}Service: {{pascalCase name}}Service, public table: GeneralTableService, private store: Store<{{pascalCase name}}State>) {
        this.table.options.primaryColumnKey = '{{camelCase name}}Id';
        this.table.options.enableRowSelect = false;
        this.table.options.export = {
            enabled: true,
            entity: '{{pascalCase name}}',
        };
        this.table.customColumns = [
            {
                key: 'name',
                title: i18next.t('{{camelCase name}}.name'),
            },
            {
                key: 'code',
                title: i18next.t('{{camelCase name}}.code'),
            },
            {
                key: 'type',
                title: i18next.t('{{camelCase name}}.type'),
            },
            {
                key: 'address',
                title: i18next.t('{{camelCase name}}.address'),
            },
            {
                key: 'email',
                title: i18next.t('{{camelCase name}}.email'),
            },
            {
                key: 'fax',
                title: i18next.t('{{camelCase name}}.fax'),
            },
            {
                key: 'telephone',
                title: i18next.t('{{camelCase name}}.telephone'),
            },
            {
                key: 'contactPerson',
                title: i18next.t('{{camelCase name}}.contact_person'),
            },
            {
                key: 'provider',
                title: i18next.t('{{camelCase name}}.provider'),
            },
            {
                key: 'authority.name',
                title: i18next.t('{{camelCase name}}.authority'),
            },
            {
                key: 'redirectionEmail',
                title: i18next.t('{{camelCase name}}.redirectionEmail'),
            },
            {
                key: 'externalPaymentLink',
                title: i18next.t('{{camelCase name}}.externalPaymentLink'),
            },
            
            // Add other fields here
        ];
    }

    ngOnInit() {
        if (this.action) {
            this.table.columnActionTemplate = this.action;
        }
        this.get{{pascalCase name}}s();
    }

    get{{pascalCase name}}s() {
        this.get{{pascalCase name}}sState.submit();
        this.{{camelCase name}}Service.getAll{{pascalCase name}}s().subscribe(
            (result) => {
                this.get{{pascalCase name}}sState.onSuccess(i18next.t('view-{{dashCase name}}s.success'), result);
            },
            (error) => {
                this.get{{pascalCase name}}sState.onFailure(i18next.t('view-{{dashCase name}}s.fail'), error.error);
            },
        );
        this.store.pipe(select({{camelCase name}}NgrxHelper.entitySelectors.selectAll), takeUntil(this.destroy$)).subscribe((result) => {
            this.{{camelCase name}}s = result;
            this.table.data = this.{{camelCase name}}s.slice();
        });
    }

    ngOnDestroy(): void {
        this.destroy$.next();
    }
}
