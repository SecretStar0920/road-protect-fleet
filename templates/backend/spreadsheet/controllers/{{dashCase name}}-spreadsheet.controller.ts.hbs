import { BadRequestException, Controller, Post, UploadedFile, UseGuards, UseInterceptors } from '@nestjs/common';
import { Body } from '@nestjs/common/decorators/http/route-params.decorator';
import { validate } from 'class-validator';
import { AuthGuard } from '@nestjs/passport';
import { FileInterceptor } from '@nestjs/platform-express';
import { SpreadsheetUploadCompleteResponse } from '@modules/shared/dtos/spreadsheet-upload-response.dto';
import { SpreadsheetUploadDto } from '@modules/shared/dtos/spreadsheet-upload.dto';
import { plainToClass } from 'class-transformer';
import { Create{{pascalCase name}}SpreadsheetService } from '@modules/{{dashCase name}}/services/create-{{dashCase name}}.spreadsheet-service';
import { PermissionGuard, Permissions } from '@modules/auth/guards/permission.guard';
import { PERMISSIONS } from '@modules/shared/models/permissions.const';
import { isEmpty } from 'lodash';
import { validatorExceptionFactory } from '@modules/shared/helpers/validator-exception-factory.helper';
import { Update{{pascalCase name}}SpreadsheetService } from '@modules/{{dashCase name}}/services/update-{{dashCase name}}.spreadsheet-service';
import { ApiExcludeEndpoint } from '@nestjs/swagger';
import { Namespace } from 'socket.io';
import { UserSocket } from '@modules/shared/decorators/user-socket.decorator';
import { UserTimezone } from '@modules/shared/decorators/user-timezone.decorator';

@Controller('{{dashCase name}}/spreadsheet')
@UseGuards(AuthGuard())
export class {{pascalCase name}}SpreadsheetController {
    constructor(private create{{pascalCase name}}SpreadsheetService: Create{{pascalCase name}}SpreadsheetService, private update{{pascalCase name}}SpreadsheetService: Update{{pascalCase name}}SpreadsheetService) {}

    @Post('verify')
    @UseInterceptors(
        FileInterceptor('file', {
            limits: {
                fieldSize: 25 * 1024 * 1024,
            },
        }),
    )
    @UseGuards(PermissionGuard)
    @Permissions(PERMISSIONS.Create{{pascalCase name}})
    @ApiExcludeEndpoint()
    async verify(@UploadedFile() file, @Body('body') body: string): Promise<SpreadsheetUploadCompleteResponse> {
        const parsedBody: SpreadsheetUploadDto = plainToClass(SpreadsheetUploadDto, JSON.parse(body) as object);
        const validationErrors = await validate(parsedBody);
        if (!isEmpty(validationErrors)) {
            throw new BadRequestException({ message: 'The uploaded data is invalid', error: validatorExceptionFactory(validationErrors) });
        }

        if (parsedBody.method === 'create') {
            return await this.create{{pascalCase name}}SpreadsheetService.verify(parsedBody);
        } else if (parsedBody.method === 'update') {
            return await this.update{{pascalCase name}}SpreadsheetService.verify(parsedBody);
        } else {
            throw new BadRequestException({ message: `Method is not yet supported or has been provided incorrectly` });
        }
    }

    @Post('upload')
    @UseInterceptors(
        FileInterceptor('file', {
            limits: {
                fieldSize: 25 * 1024 * 1024,
            },
        }),
    )
    @UseGuards(PermissionGuard)
    @Permissions(PERMISSIONS.Create{{pascalCase name}})
    @ApiExcludeEndpoint()
    async upload(@UploadedFile() file, @Body('body') body: string, @UserSocket() socket: Namespace, @UserTimezone() timezone: string) {
        const parsedBody: SpreadsheetUploadDto = plainToClass(SpreadsheetUploadDto, JSON.parse(body) as object);
        const validationErrors = await validate(parsedBody);
        if (!isEmpty(validationErrors)) {
            throw new BadRequestException({ message: 'The uploaded data is invalid', error: validatorExceptionFactory(validationErrors) });
        }

        if (parsedBody.method === 'create') {
            this.create{{pascalCase name}}SpreadsheetService.upload(parsedBody, socket, timezone).catch(e => {
                throw e;
            });
        } else if (parsedBody.method === 'update') {
            this.update{{pascalCase name}}SpreadsheetService.upload(parsedBody, socket).catch(e => {
                throw e;
            });
        } else {
            throw new BadRequestException({ message: `Method is not yet supported or has been provided incorrectly` });
        }
    }
}
